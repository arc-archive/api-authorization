import {CSSResult, LitElement, TemplateResult} from 'lit-element';
import {AmfHelperMixin} from '@api-components/amf-helper-mixin';
import { AuthorizationParams, ApiAuthorizationSettings, CredentialSource } from './types'

export {clearCache};
declare function clearCache(): void;

export {ApiAuthorization};

/**
 * An element that renders various authorization methods.
 *
 * ## Development
 *
 * The element mixes in multiple mixins from `src/` directory.
 * Each mixin support an authorization method. When selection change (the `type`
 * property) a render function from corresponding mixin is called.
 */
declare class ApiAuthorization extends AmfHelperMixin(LitElement) {
  get styles(): CSSResult;
  /**
   * @attribute
   */
  selected: number;
  /**
   * A security model generated by the AMF parser.
   */
  security: any[];
  methods: any[];
  /**
   * @attribute
   */
  compatibility: boolean;
  /**
   * @attribute
   */
  outlined: boolean;
  /**
   * @attribute
   */
  readOnly: boolean;
  /**
   * @attribute
   */
  disabled: boolean;
  /**
   * @attribute
   */
  invalid: boolean;
  /**
   * @attribute
   */
  redirectUri: string;
  /**
   * @attribute
   */
  httpMethod: string;
  /**
   * @attribute
   */
  requestUrl: string;
  /**
   * @attribute
   */
  requestBody: string;
  /**
   * @attribute
   */
  credentialsSource: Array<CredentialSource>;
  onchange: EventListener;
  get selectedMethods(): any[];
  readonly selectedSchemes: any[];
  readonly settings: ApiAuthorizationSettings[];

  constructor();
  serialize(): Array<ApiAuthorizationSettings>;
  validate(): boolean;
  createAuthParams(): AuthorizationParams;
  forceAuthorization(validate: boolean): Promise<boolean>;
  render(): TemplateResult;
  clearCache(): void;
  _createSettings(target: Node): ApiAuthorizationSettings;
  _processModel(): void;
  _applyModel(): void;
  _computeAuthMethods(securities: Array<Object>): Array<Object>;
  _listSchemeLabels(scheme: object): Array<String>;
  _selectionHandler(e: CustomEvent): void;
  _changeHandler(): void;
  _applyAuthParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyBasicParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyHeaderParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyQueryParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyPtParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyOa2Params(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyBearerParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyApiKeyParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _applyRamlCustomParams(auth: ApiAuthorizationSettings, target: AuthorizationParams): void;
  _selectorTemplate(): TemplateResult|string;
  _singleItemTemplate(auth: object): TemplateResult;
  _selectorItem(item: object): TemplateResult;
  _methodsTemplate(): Array<TemplateResult|string>|string;
  _apiKeyTemplate(schema: object): TemplateResult;
  _renderMethod(type: string, scheme: object, renderTitle: boolean): TemplateResult|string;
  _methodTitleTemplate(scheme: object): TemplateResult|string;
  _basicAuthTemplate(security: object, renderTitle: boolean): TemplateResult;
  _digestAuthTemplate(security: object, renderTitle: boolean): TemplateResult;
  _passThroughAuthTemplate(security: object, renderTitle: boolean): TemplateResult;
  _ramlCustomAuthTemplate(security: object, renderTitle: boolean): TemplateResult;
  _bearerAuthTemplate(security: object, renderTitle: boolean): TemplateResult;
  _oa1AuthTemplate(security: object, renderTitle: boolean): TemplateResult;
  _oa2AuthTemplate(security: object, renderTitle: boolean): TemplateResult;
  _apiKeyTemplate(security: object, renderTitle: boolean): TemplateResult;
}
